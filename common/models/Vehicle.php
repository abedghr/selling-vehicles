<?php

namespace common\models;

use Yii;
use yii\caching\TagDependency;
use yii\web\UploadedFile;

/**
 * This is the model class for table "vehicle".
 *
 * @property int $id
 * @property int $user_id
 * @property int $make_id
 * @property int $model_id
 * @property int $color_id
 * @property int $body_type_id
 * @property int $gear_box_id
 * @property string $title
 * @property string $title_en
 * @property string $price
 * @property string $description
 * @property string $description_en
 * @property string $main_image
 * @property string $type
 * @property string|null $status
 * @property string|null $manufacturing_year
 * @property int|null $is_deleted
 * @property string|null $created_at
 * @property string|null $updated_at
 *
 * @property NewVehicle $newVehicle
 * @property UsedVehicle $usedVehicle
 * @property Taxonomy $bodyType
 * @property Taxonomy $color
 * @property Taxonomy $gearBox
 * @property Taxonomy $make
 * @property Taxonomy $model
 * @property User $user
 * @property VehicleComment[] $vehicleComments
 * @property Comment[] $comments
 * @property VehicleFeature[] $vehicleFeatures
 * @property Taxonomy[] $taxonomies
 * @property VehicleMedia[] $vehicleMedia
 *
 * @var NewVehicle|UsedVehicle $vehicle
 * @var Media $media
 */
class Vehicle extends \common\models\BaseModels\Vehicle
{
    public $imageFile;
    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    const TYPE_NEW = 'new';
    const TYPE_USED = 'used';

    const VEHICLE_ACTIVE = "10";
    const VEHICLE_PENDING = "9";
    const VEHICLE_BLOCKED = "-1";

    public function rules()
    {
        return array_merge(parent::rules(), [
            [['imageFile'], 'file', 'extensions' => 'png, jpg', 'maxFiles' => 1, 'extensions' => 'png, jpg, jpeg', 'skipOnEmpty' => true, 'on' => self::SCENARIO_UPDATE],
            [['imageFile'], 'file', 'extensions' => 'png, jpg', 'maxFiles' => 1, 'extensions' => 'png, jpg, jpeg', 'skipOnEmpty' => false, 'on' => self::SCENARIO_CREATE]
        ]); // TODO: Change the autogenerated stub
    }

    public function vehicleTypeList()
    {
        return [
            self::TYPE_NEW => Yii::t('app', 'new'),
            self::TYPE_USED => Yii::t('app', 'used')
        ];
    }

    public function vehicleStatusList()
    {
        return [
            9 => self::VEHICLE_PENDING /*Yii::t('app','pending')*/,
            10 => self::VEHICLE_ACTIVE /*Yii::t('app','active')*/,
            -1 => self::VEHICLE_BLOCKED /*Yii::t('app','active')*/,
        ];
    }

    public function createVehicle($vehicle, $media, $feautre = null)
    {
        $transaction = Yii::$app->db->beginTransaction();
        if ($this->imageFile = UploadedFile::getInstance($this, 'imageFile')) {
            $this->main_image = time() . '_' . $this->imageFile->name;
            if ($this->save()) {
                if (isset($feautre) && $feautre->features) {
                    foreach ($feautre->features as $single_feature) {
                        if($single_feature) {
                            foreach ($single_feature as $item) {
                                $v_feature = new VehicleFeature();
                                $v_feature->vehicle_id = $this->id;
                                $v_feature->taxonomy_id = $item;
                                if (!$v_feature->save()) {
                                    $transaction->rollBack();
                                    return false;
                                }
                            }
                        }
                    }
                }

                $vehicle->vehicle_id = $this->id;
                if ($vehicle->save()) {
//                    if (!$this->imageFile->saveAs('uploads/vehicle/' . time() . '_' . $this->imageFile)) {
                    if (!$this->imageFile->saveAs(Yii::getAlias('@backend').'/web/uploads/vehicle/' . time() . '_' . $this->imageFile)) {
                        $transaction->rollBack();
                        return false;
                    }
                    $uploads = $this->MultiUploadImages($media);
                    if ($uploads) {
                        $transaction->commit();
                        return true;
                    }
                    $transaction->rollBack();
                    return false;
                }
                $transaction->rollBack();
            }
            return false;
        }
    }

    public function updateVehicle($vehicle, $media, $feature = null)
    {
        $transaction = Yii::$app->db->beginTransaction();
        if ($this->imageFile = UploadedFile::getInstance($this, 'imageFile')) {
            $this->main_image = time() . '_' . $this->imageFile->name;
        }
        if ($this->save()) {
            if ($feature->features) {
                foreach ($feature->features as $single_feature) {
                    if($single_feature) {
                        foreach ($single_feature as $item) {
                            $v_feature = new VehicleFeature();
                            $v_feature->vehicle_id = $this->id;
                            $v_feature->taxonomy_id = $item;
                            if ($v_feature->isNewRecord && !$v_feature->save()) {
                                $transaction->rollBack();
                                return false;
                            }
                        }
                    }
                }
            }
            $vehicle->vehicle_id = $this->id;
            if ($vehicle->save()) {
//                if ($this->imageFile && !$this->imageFile->saveAs('uploads/vehicle/' . time() . '_' . $this->imageFile)) {
                if ($this->imageFile && !$this->imageFile->saveAs(Yii::getAlias('@backend').'/web/uploads/vehicle/' . time() . '_' . $this->imageFile)) {
                    $transaction->rollBack();
                    return false;
                }

                if ($media->imageFile = UploadedFile::getInstances($media, 'imageFile')) {
                    $uploads = $this->MultiUploadImages($media);
                    if (!$uploads) {
                        $transaction->rollBack();
                        return false;
                    }
                }
                $transaction->commit();
                return true;
            }
            $transaction->rollBack();
        }
        return false;
    }

    public function MultiUploadImages($media)
    {
        $media->imageFile = UploadedFile::getInstances($media, 'imageFile');
        $check = true;
        foreach ($media->imageFile as $single_image) {
            $v_media = new Media();
            $v_media->user_id = Yii::$app->user->id;
            $v_media->image = time() . '_' . $single_image->name;
            if ($v_media->save(false)) {
//                if (!$single_image->saveAs('uploads/vehicle/' . time() . '_' . $single_image)) {
                if (!$single_image->saveAs(Yii::getAlias('@backend').'/web/uploads/vehicle/' . time() . '_' . $single_image)) {
                    return false;
                }
                $vehicle_media = new VehicleMedia();
                $vehicle_media->vehicle_id = $this->id;
                $vehicle_media->media_id = $v_media->id;
                if (!$vehicle_media->save(false)) {
                    $check = false;
                    return $check;
                }
            }
        }
        return $check;
    }

    public function vehicleList($type)
    {
        $vehicle = new VehicleSearch();
        return $vehicle->search([])->query->JoinWith('newVehicle')->where(['type' => $type]);
    }

    public function vehicleNewDetail($id)
    {
        return Vehicle::find()->where(['id' => $id])
            ->andWhere(['type' => Vehicle::TYPE_NEW])
            ->with([
                'make',
                'model',
                'user',
                'user.company',
                'user.city',
                'newVehicle',
                'vehicleMedia',
                'vehicleMedia.media',
                'bodyType',
                'taxonomies',
                'comments',
                'vehicleFeatures.vehicle',
                'vehicleFeatures.taxonomy',
            ])->one();
    }

    public function vehicleUsedDetail($id)
    {
        return Vehicle::find()->where(['id' => $id])
            ->andWhere(['type' => Vehicle::TYPE_USED])
            ->with([
                'make',
                'model',
                'user',
                'user.individualUser',
                'user.company',
                'user.city',
                'usedVehicle',
                'vehicleMedia',
                'vehicleMedia.media',
                'bodyType',
                'comments',
            ])->one();
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        if(!$insert) {
            /** @var  $single_vehicle Vehicle */
            if(Yii::$app->cache->flush($this->id))
                Yii::$app->cache->set($this->id, $this, 20);
        }
    }
}
